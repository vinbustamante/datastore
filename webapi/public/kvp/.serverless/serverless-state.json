{
  "service": {
    "service": "datastore-kvp",
    "serviceObject": {
      "name": "datastore-kvp"
    },
    "provider": {
      "stage": "dev",
      "region": "ap-southeast-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "memorySize": 256,
      "timeout": 60,
      "versionFunctions": false,
      "stackName": "dev-datastore-kvp",
      "stackTags": {
        "project": "datastore"
      },
      "vpc": {
        "securityGroupIds": [
          {
            "Ref": "ServerlessSecurityGroup"
          }
        ],
        "subnetIds": [
          {
            "Ref": "PrivateSubnetA"
          }
        ]
      },
      "environment": {
        "projectName": "datastore",
        "projectStage": "dev",
        "module": "kvp",
        "redis_host": "localhost",
        "redis_port": 6379,
        "redis_db": 0,
        "defaultCacheInSeconds": 3600,
        "mongoDbConnection": "mongodb://localhost:27017/dev-datastore-kvp"
      },
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "AppLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-datastore-kvp"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "datastore-kvp",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dev-datastore-kvp:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dev-datastore-kvp:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "datastore-kvp",
                    "dev",
                    "ap-southeast-1",
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "AppLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/datastore-kvp/dev/1553096082804-2019-03-20T15:34:42.804Z/datastore-kvp.zip"
              },
              "FunctionName": "dev-datastore-kvp",
              "Handler": "lambda.handler",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "projectName": "datastore",
                  "projectStage": "dev",
                  "module": "kvp",
                  "redis_host": "localhost",
                  "redis_port": 6379,
                  "redis_db": 0,
                  "defaultCacheInSeconds": 3600,
                  "mongoDbConnection": "mongodb://localhost:27017/dev-datastore-kvp"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Ref": "ServerlessSecurityGroup"
                  }
                ],
                "SubnetIds": [
                  {
                    "Ref": "PrivateSubnetA"
                  }
                ]
              }
            },
            "DependsOn": [
              "AppLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AppEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "DISABLED",
              "Name": "dev-datastore-kvp-warm-event",
              "Targets": [
                {
                  "Input": "{\"path\":\"/authentication/warm\",\"httpMethod\":\"GET\",\"headers\":{\"Content-Type\":\"application/json\"},\"isBase64Encoded\":false,\"body\":\"{}\"}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "AppLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "appSchedule"
                }
              ]
            }
          },
          "AppLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "events.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::GetAtt": [
                  "AppEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-datastore-kvp",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1553096082817": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProxyVarOptions",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "AppLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "CidrBlock": "10.0.0.0/16"
            }
          },
          "VPCEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "RouteTableIds": [
                {
                  "Ref": "PrivateRouteTable"
                },
                {
                  "Ref": "PublicRouteTable"
                }
              ],
              "ServiceName": "com.amazonaws.ap-southeast-1.dynamodb",
              "VpcEndpointType": "Gateway"
            }
          },
          "IP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
              "Domain": "vpc"
            }
          },
          "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
          },
          "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "InternetGatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "NatGateway": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
              "AllocationId": {
                "Fn::GetAtt": [
                  "IP",
                  "AllocationId"
                ]
              },
              "SubnetId": {
                "Ref": "PublicSubnetA"
              }
            }
          },
          "PrivateSubnetA": {
            "DependsOn": "VPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "AvailabilityZone": "ap-southeast-1a",
              "CidrBlock": "10.0.1.0/24"
            }
          },
          "PublicSubnetA": {
            "DependsOn": "VPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "AvailabilityZone": "ap-southeast-1a",
              "CidrBlock": "10.0.2.0/24"
            }
          },
          "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PrivateRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                "Ref": "NatGateway"
              }
            }
          },
          "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "SubnetRouteTableAssociationLambdaPrivateA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PrivateSubnetA"
              },
              "RouteTableId": {
                "Ref": "PrivateRouteTable"
              }
            }
          },
          "SubnetRouteTableAssociationLambdaPublicA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnetA"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
          "ServerlessSecurityGroup": {
            "DependsOn": "VPC",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "SecurityGroup for Serverless Functions",
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "ServerlessStorageSecurityGroup": {
            "DependsOn": "VPC",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Ingress for Redis Cluster",
              "VpcId": {
                "Ref": "VPC"
              },
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "6379",
                  "ToPort": "6379",
                  "SourceSecurityGroupId": {
                    "Ref": "ServerlessSecurityGroup"
                  }
                }
              ]
            }
          },
          "ServerlessCacheSubnetGroup": {
            "Type": "AWS::ElastiCache::SubnetGroup",
            "Properties": {
              "Description": "Cache Subnet Group",
              "SubnetIds": [
                {
                  "Ref": "PrivateSubnetA"
                }
              ]
            }
          },
          "DataStoreCache": {
            "DependsOn": "ServerlessStorageSecurityGroup",
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
              "ClusterName": "dev-kvp",
              "AutoMinorVersionUpgrade": true,
              "Engine": "redis",
              "CacheNodeType": "cache.t2.micro",
              "NumCacheNodes": 1,
              "VpcSecurityGroupIds": [
                {
                  "Fn::GetAtt": "ServerlessStorageSecurityGroup.GroupId"
                }
              ],
              "CacheSubnetGroupName": {
                "Ref": "ServerlessCacheSubnetGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.ap-southeast-1.",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "LambdaArn": {
            "Value": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:lambda:",
                  "ap-southeast-1",
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":function:",
                  "dev-datastore-kvp"
                ]
              ]
            }
          },
          "SecurityGroupId": {
            "Value": {
              "Ref": "ServerlessSecurityGroup"
            }
          },
          "SubnetPrivateSubnetA": {
            "Value": {
              "Ref": "PrivateSubnetA"
            }
          },
          "RedisInstance": {
            "Value": {
              "Fn::GetAtt": [
                "AuthCache",
                "RedisEndpoint.Address"
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "project": {
        "accountId": {
          "Ref": "AWS::AccountId"
        },
        "name": "datastore",
        "module": "kvp"
      },
      "elasticCache": {
        "remote": {
          "Fn::GetAtt": [
            "DataStoreCache",
            "RedisEndpoint.Address"
          ]
        }
      },
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "includeModules": false,
        "packager": "npm"
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "app": {
        "name": "dev-datastore-kvp",
        "handler": "lambda.handler",
        "events": [
          {
            "schedule": {
              "name": "dev-datastore-kvp-warm-event",
              "rate": "rate(5 minutes)",
              "enabled": false,
              "input": "{\"path\":\"/authentication/warm\",\"httpMethod\":\"GET\",\"headers\":{\"Content-Type\":\"application/json\"},\"isBase64Encoded\":false,\"body\":\"{}\"}"
            }
          },
          {
            "http": {
              "path": "{proxy+}",
              "method": "any",
              "cors": [
                {
                  "enabled": true,
                  "origin": "*",
                  "headers": [
                    "Access-Control-Allow-Origin"
                  ]
                }
              ],
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless/datastore-kvp.zip"
        },
        "memory": 256,
        "timeout": 60,
        "runtime": "nodejs8.10",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": "10.0.0.0/16"
          }
        },
        "VPCEndpoint": {
          "Type": "AWS::EC2::VPCEndpoint",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "RouteTableIds": [
              {
                "Ref": "PrivateRouteTable"
              },
              {
                "Ref": "PublicRouteTable"
              }
            ],
            "ServiceName": "com.amazonaws.ap-southeast-1.dynamodb",
            "VpcEndpointType": "Gateway"
          }
        },
        "IP": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
            "Domain": "vpc"
          }
        },
        "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway"
        },
        "VPCGatewayAttachment": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "InternetGatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "NatGateway": {
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
            "AllocationId": {
              "Fn::GetAtt": [
                "IP",
                "AllocationId"
              ]
            },
            "SubnetId": {
              "Ref": "PublicSubnetA"
            }
          }
        },
        "PrivateSubnetA": {
          "DependsOn": "VPC",
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "AvailabilityZone": "ap-southeast-1a",
            "CidrBlock": "10.0.1.0/24"
          }
        },
        "PublicSubnetA": {
          "DependsOn": "VPC",
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "AvailabilityZone": "ap-southeast-1a",
            "CidrBlock": "10.0.2.0/24"
          }
        },
        "PrivateRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "PrivateRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "PrivateRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "NatGateway"
            }
          }
        },
        "PublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "PublicRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "SubnetRouteTableAssociationLambdaPrivateA": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PrivateSubnetA"
            },
            "RouteTableId": {
              "Ref": "PrivateRouteTable"
            }
          }
        },
        "SubnetRouteTableAssociationLambdaPublicA": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnetA"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        },
        "ServerlessSecurityGroup": {
          "DependsOn": "VPC",
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "SecurityGroup for Serverless Functions",
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "ServerlessStorageSecurityGroup": {
          "DependsOn": "VPC",
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Ingress for Redis Cluster",
            "VpcId": {
              "Ref": "VPC"
            },
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": "6379",
                "ToPort": "6379",
                "SourceSecurityGroupId": {
                  "Ref": "ServerlessSecurityGroup"
                }
              }
            ]
          }
        },
        "ServerlessCacheSubnetGroup": {
          "Type": "AWS::ElastiCache::SubnetGroup",
          "Properties": {
            "Description": "Cache Subnet Group",
            "SubnetIds": [
              {
                "Ref": "PrivateSubnetA"
              }
            ]
          }
        },
        "DataStoreCache": {
          "DependsOn": "ServerlessStorageSecurityGroup",
          "Type": "AWS::ElastiCache::CacheCluster",
          "Properties": {
            "ClusterName": "dev-kvp",
            "AutoMinorVersionUpgrade": true,
            "Engine": "redis",
            "CacheNodeType": "cache.t2.micro",
            "NumCacheNodes": 1,
            "VpcSecurityGroupIds": [
              {
                "Fn::GetAtt": "ServerlessStorageSecurityGroup.GroupId"
              }
            ],
            "CacheSubnetGroupName": {
              "Ref": "ServerlessCacheSubnetGroup"
            }
          }
        }
      },
      "Outputs": {
        "LambdaArn": {
          "Value": {
            "Fn::Join": [
              "",
              [
                "arn:aws:lambda:",
                "ap-southeast-1",
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":function:",
                "dev-datastore-kvp"
              ]
            ]
          }
        },
        "SecurityGroupId": {
          "Value": {
            "Ref": "ServerlessSecurityGroup"
          }
        },
        "SubnetPrivateSubnetA": {
          "Value": {
            "Ref": "PrivateSubnetA"
          }
        },
        "RedisInstance": {
          "Value": {
            "Fn::GetAtt": [
              "AuthCache",
              "RedisEndpoint.Address"
            ]
          }
        }
      }
    },
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/datastore-kvp/dev/1553096082804-2019-03-20T15:34:42.804Z",
    "artifact": ""
  }
}